#!/usr/bin/env ruby
# frozen_string_literal: true

#-------------------------------------------------------------------------------
# cue2tracklist
# MIT License, (c) 2022 Liam Cooke
#-------------------------------------------------------------------------------
#
# Naive cue file parser. Reads a cue file from standard input, and prints
# a plain text tracklist. Made for a specific use case: extracting tracklists
# from Rekordbox DJ recordings.
#
# Example:
#
#   $ cue2tracklist < 01\ REC-2022-04-09.cue
#   Silence Groove - Feel
#   Silence Groove - Offset
#   The Vagrant - This Is...
#   Dead Man's Chest - Westworld
#   Eusebeia - Vision
#   Paradox - Isotoxal
#
#-------------------------------------------------------------------------------

require 'set'

def cue_string(value)
  value.match(/^".*"$/) ? value[1...-1] : value
end

def parse_line(line)
  info = line.match(/^\s+(TRACK|TITLE|PERFORMER)\s(.+)$/)

  case info && info[1]
  when 'TRACK'
    [:track, nil]
  when 'PERFORMER'
    [:artist, cue_string(info[2])]
  when 'TITLE'
    [:title, cue_string(info[2])]
  else
    [nil, nil]
  end
end

def parse(file)
  seen = Set.new
  track = {}
  $stdin.readlines.each do |line|
    key, value = parse_line(line.rstrip)
    case key
    when :track
      yield track unless track.empty? || seen.include?(track)
      seen.add(track)
      track = {}
    when :artist, :title
      track[key] = value
    end
  end
  yield track unless track.empty? || seen.include?(track)
end

def format_track(track)
  artist = track.fetch(:artist, '?')
  title = track.fetch(:title, '?')
  "#{artist} - #{title}"
end

parse($stdin) do |track|
  puts format_track(track)
end
